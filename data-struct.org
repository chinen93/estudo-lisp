#+TITLE:        Data Struct Study
#+AUTHOR:       Pedro Chinen
#+EMAIL:        ph.u.chinen@gmail.com
#+DATE-CREATED: [2018-02-09 Fri]
#+DATE-UPDATED: [2018-02-26 Mon]

* Orientação a Objetos
:PROPERTIES:
:ID:       34c8e45a-972a-4348-abe8-c0cd75fff43a
:END:

https://ericabrahamsen.net/tech/2016/feb/bbdb-eieio-object-oriented-elisp.html

* Listas
:PROPERTIES:
:ID:       38a6ba3e-669c-47ec-b294-3eb5c12c7e39
:END:

https://www.gnu.org/software/emacs/manual/html_node/cl/Lists.html#Lists

* Estruturas
:PROPERTIES:
:ID:       31f7cd19-1442-4360-8e24-172393737b50
:END:

https://www.gnu.org/software/emacs/manual/html_node/cl/Structures.html#Structures

* Hash Table
:PROPERTIES:
:ID:       c064d4a0-4a0d-4dfa-9bd5-bcb4d04cf990
:END:

https://www.gnu.org/software/emacs/manual/html_node/elisp/Hash-Tables.html

Hash table é um tipo de tabela de rápido acesso. Cada chave correspode a um valor. Algumas das suas caracteristicas são: Rapidade de acesso a valores guardados independente da quantidade de dados armazenados; Seus valores e chaves não estão em uma ordem específica;

Elisp provê um tipo para "hash table" junto com uma série de funções pra operar com este tipo de dado. Eles apresentam uma forma especial de representação gráfica

#+begin_src emacs-lisp
  (make-hash-table)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ())

** Criando Hash tables
:PROPERTIES:
:ID:       9c99981a-1e5b-4615-9fcf-82b44a3213bc
:END:

A principal função parar criar "hash tables" é (make-hash-table), ela apresenta alguns parametros que podem ser alterados tornando as tabelas mais expecíficas para cada oportunidade.

*** Argumento :test
:PROPERTIES:
:ID:       3f80d21a-a45b-4cc7-9cf9-f48a28172d2e
:END:

Este tipo especifica o método utilizado para comparar chaves a fim de verificar se encontrou o valor procurado.

O valor padrão é "eql". Outros valores que podem ser colocados são: "eq" e "equal".

#+begin_src emacs-lisp
  (make-hash-table :test 'eql)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ())

#+begin_src emacs-lisp
  (make-hash-table :test 'eq)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8 data ())

#+begin_src emacs-lisp
  (make-hash-table :test 'equal)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ())


*** Argumento :weakness
:PROPERTIES:
:ID:       89416869-2328-4bb1-9cff-d9f8ebe1ae4b
:END:

Esse argumento verifica se as chaves e os valores na tabela são preservados do coletor de lixo do sistema. 

O valor deve ser: "nil", "key", "value", "key-or-value", "key-and-value". 

Se o valor for "key" então a tabela não previne suas chaves de serem coletadas; Se uma chave for coletada a associação correspondente é removida da tabela.

#+begin_src emacs-lisp
  (make-hash-table :weakness 'key)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql weakness key rehash-size 1.5 rehash-threshold 0.8 data ())

Se o valor for "value" então a tabela não previne seus valores de serem coletados; Se um valor é coletado a associação correspondente é removida.

#+begin_src emacs-lisp
  (make-hash-table :weakness 'value)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql weakness value rehash-size 1.5 rehash-threshold 0.8 data ())

Se o valor for "key-and-value" então tanto a chave quanto o valor devem estar carregados para preservar a associação, portanto nem a chave nem o valor é preservado de serem coletados.

#+begin_src emacs-lisp
  (make-hash-table :weakness 'key-and-value)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql weakness key-and-value rehash-size 1.5 rehash-threshold 0.8 data ())

Se o valor for "key-or-value" então tanto a chave quando o valor podem preservar a associação, portanto a associação só é removida caso a chave e o valor sejam coletados.

#+begin_src emacs-lisp
  (make-hash-table :weakness 'key-or-value)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql weakness key-or-value rehash-size 1.5 rehash-threshold 0.8 data ())

O valor padrão é "nil". Com este argumento todas as chaves e valores são preservados.

#+begin_src emacs-lisp
  (make-hash-table :weakness 'nil)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ())

** Manipulando Dados
:PROPERTIES:
:ID:       c787cce8-6d79-4446-908f-3b8efceb9013
:END:

Qualquer objeto LISP pode ser usado como *chave*, no entanto é preciso que o argumento "test" da criação da tabela seja apropriado.

Qualquer objeto LISP pode ser usado como *valor*.

*** Colocar valores (puthash)
:PROPERTIES:
:ID:       e8c21956-9d0e-4e2f-815d-424777dfefc2
:END:

*puthash key value table*, coloca na TABLE o valor VALUE associada com a chave KEY.

#+begin_src emacs-lisp
  (let ((table (make-hash-table)))
    (puthash '3 2 table)
    (puthash "string" 2 table)
    (puthash '(a 2) 2 table)
    table)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (3 2 "string" 2 (a 2) 2))

*** Acessar valores (gethash)
:PROPERTIES:
:ID:       8ac3422d-b81f-4f27-b574-f021cabc48bb
:END:

*gethash key table &optional default*, procura por KEY em TABLE e retorna o valor encontrado. Se nenhum valor for encontrado DEFAULT será retornado. Por padrão DEFAULT é "nil".

#+begin_src emacs-lisp
  (let ((table (make-hash-table :test 'equal)))
    (puthash '3 2 table)
    (puthash "string" 6 table)
    (puthash '(a 2) 9 table)

    (gethash "string" table))
#+end_src

#+RESULTS:
: 6

*** Remover valores (remhash)
:PROPERTIES:
:ID:       6f4c0770-906a-42b1-b358-d29b6b4254f3
:END:

*remhash key table*, remove KEY de TABLE

#+begin_src emacs-lisp
  (let ((table (make-hash-table :test 'equal)))
    (puthash '3 2 table)
    (puthash "string" 6 table)
    (puthash '(a 2) 9 table)

    (remhash "string" table)
    table)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (3 2 (a 2) 9))

#+begin_src emacs-lisp
  (let ((table (make-hash-table :test 'equal)))
    (puthash '3 2 table)
    (puthash "string" 6 table)
    (puthash '(a 2) 9 table)

    (remhash 'chave-inexistente table)
    table)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (3 2 "string" 6 (a 2) 9))

*** Limpar tabela (clrhash)
:PROPERTIES:
:ID:       bb72550c-6fc1-4b44-9b78-a6c4ef48628a
:END:

*clrhash table*, limpa TABLE de todos os valores presenters nela.

#+begin_src emacs-lisp
  (let ((table (make-hash-table :test 'equal)))
    (puthash '3 2 table)
    (puthash "string" 6 table)
    (puthash '(a 2) 9 table)

    (clrhash table)
    table)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ())

*** Mapear função (maphash)
:PROPERTIES:
:ID:       d01ac337-b060-4da3-aa5c-0a9e9bbe2e09
:END:

*maphash function table*, executa FUNCTION em todos os valores de TABLE. Function deve ser uma função que aceita dois argumentos a *chave* e o *valor*

#+begin_src emacs-lisp
  (let ((table (make-hash-table :test 'equal))
        (res '()))
    (puthash 1 2 table)
    (puthash 3 4 table)
    (puthash 5 6 table)

    (maphash #'(lambda (key value) 
                 (setq res (cons (cons key value) res))) 
             table)
    res)
#+end_src

#+RESULTS:
: ((5 . 6) (3 . 4) (1 . 2))

